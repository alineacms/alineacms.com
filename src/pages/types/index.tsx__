import {TypeOf} from 'alinea'
import {GetStaticPropsContext} from 'next'
import {backend} from '../../../alinea.backend'
import {types} from '../../data/Types'
import {layoutQuery} from '../../view/layout/Layout.query'
import {TypePage} from '../../view/TypePage'

export function memberPath(name: string) {
  return name
    .split('/')
    .filter(segment => segment !== 'dist')
    .join('/')
}

export async function getStaticProps(context: GetStaticPropsContext) {
  const pages = backend.loadPages('web')
  const slug = context.params?.path as Array<string> | null
  const name = slug?.join('/')
  const members = types.children!.filter(
    child => memberPath(child.name) === name
  )
  const props = {
    layout: await layoutQuery(pages, {title: 'Types', url: '/types'}),
    members
  }
  return {props}
}

export type TypePageProps = TypeOf<ReturnType<typeof getStaticProps>>['props']

export default TypePage
